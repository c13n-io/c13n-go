// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: rpc/services/rpc.proto

package services

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//* Represents the state of an invoice.
type PaymentState int32

const (
	PaymentState_PAYMENT_UNKNOWN   PaymentState = 0
	PaymentState_PAYMENT_INFLIGHT  PaymentState = 1
	PaymentState_PAYMENT_SUCCEEDED PaymentState = 2
	PaymentState_PAYMENT_FAILED    PaymentState = 3
)

// Enum value maps for PaymentState.
var (
	PaymentState_name = map[int32]string{
		0: "PAYMENT_UNKNOWN",
		1: "PAYMENT_INFLIGHT",
		2: "PAYMENT_SUCCEEDED",
		3: "PAYMENT_FAILED",
	}
	PaymentState_value = map[string]int32{
		"PAYMENT_UNKNOWN":   0,
		"PAYMENT_INFLIGHT":  1,
		"PAYMENT_SUCCEEDED": 2,
		"PAYMENT_FAILED":    3,
	}
)

func (x PaymentState) Enum() *PaymentState {
	p := new(PaymentState)
	*p = x
	return p
}

func (x PaymentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentState) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_services_rpc_proto_enumTypes[0].Descriptor()
}

func (PaymentState) Type() protoreflect.EnumType {
	return &file_rpc_services_rpc_proto_enumTypes[0]
}

func (x PaymentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentState.Descriptor instead.
func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{0}
}

//* Represents the state of a HTLC.
type HTLCState int32

const (
	HTLCState_HTLC_IN_FLIGHT HTLCState = 0
	HTLCState_HTLC_SUCCEEDED HTLCState = 1
	HTLCState_HTLC_FAILED    HTLCState = 2
)

// Enum value maps for HTLCState.
var (
	HTLCState_name = map[int32]string{
		0: "HTLC_IN_FLIGHT",
		1: "HTLC_SUCCEEDED",
		2: "HTLC_FAILED",
	}
	HTLCState_value = map[string]int32{
		"HTLC_IN_FLIGHT": 0,
		"HTLC_SUCCEEDED": 1,
		"HTLC_FAILED":    2,
	}
)

func (x HTLCState) Enum() *HTLCState {
	p := new(HTLCState)
	*p = x
	return p
}

func (x HTLCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTLCState) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_services_rpc_proto_enumTypes[1].Descriptor()
}

func (HTLCState) Type() protoreflect.EnumType {
	return &file_rpc_services_rpc_proto_enumTypes[1]
}

func (x HTLCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTLCState.Descriptor instead.
func (HTLCState) EnumDescriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{1}
}

//* Represents the state of an invoice.
type InvoiceState int32

const (
	InvoiceState_INVOICE_OPEN      InvoiceState = 0
	InvoiceState_INVOICE_ACCEPTED  InvoiceState = 1
	InvoiceState_INVOICE_SETTLED   InvoiceState = 2
	InvoiceState_INVOICE_CANCELLED InvoiceState = 3
)

// Enum value maps for InvoiceState.
var (
	InvoiceState_name = map[int32]string{
		0: "INVOICE_OPEN",
		1: "INVOICE_ACCEPTED",
		2: "INVOICE_SETTLED",
		3: "INVOICE_CANCELLED",
	}
	InvoiceState_value = map[string]int32{
		"INVOICE_OPEN":      0,
		"INVOICE_ACCEPTED":  1,
		"INVOICE_SETTLED":   2,
		"INVOICE_CANCELLED": 3,
	}
)

func (x InvoiceState) Enum() *InvoiceState {
	p := new(InvoiceState)
	*p = x
	return p
}

func (x InvoiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_services_rpc_proto_enumTypes[2].Descriptor()
}

func (InvoiceState) Type() protoreflect.EnumType {
	return &file_rpc_services_rpc_proto_enumTypes[2]
}

func (x InvoiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceState.Descriptor instead.
func (InvoiceState) EnumDescriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{2}
}

//* Represents the state of an invoice HTLC.
type InvoiceHTLCState int32

const (
	InvoiceHTLCState_INVOICE_HTLC_ACCEPTED  InvoiceHTLCState = 0
	InvoiceHTLCState_INVOICE_HTLC_SETTLED   InvoiceHTLCState = 1
	InvoiceHTLCState_INVOICE_HTLC_CANCELLED InvoiceHTLCState = 2
)

// Enum value maps for InvoiceHTLCState.
var (
	InvoiceHTLCState_name = map[int32]string{
		0: "INVOICE_HTLC_ACCEPTED",
		1: "INVOICE_HTLC_SETTLED",
		2: "INVOICE_HTLC_CANCELLED",
	}
	InvoiceHTLCState_value = map[string]int32{
		"INVOICE_HTLC_ACCEPTED":  0,
		"INVOICE_HTLC_SETTLED":   1,
		"INVOICE_HTLC_CANCELLED": 2,
	}
)

func (x InvoiceHTLCState) Enum() *InvoiceHTLCState {
	p := new(InvoiceHTLCState)
	*p = x
	return p
}

func (x InvoiceHTLCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceHTLCState) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_services_rpc_proto_enumTypes[3].Descriptor()
}

func (InvoiceHTLCState) Type() protoreflect.EnumType {
	return &file_rpc_services_rpc_proto_enumTypes[3]
}

func (x InvoiceHTLCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceHTLCState.Descriptor instead.
func (InvoiceHTLCState) EnumDescriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{3}
}

//*
//Corresponds to pagination parameters for requests.
//Represents a request for page_size elements,
//terminating with the element with id last_id.
//If reverse is true, the returned elements end with last_id.
type KeySetPageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The id of the first element of the requested range.
	LastId uint64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	//* The number of elements to return.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	//* Whether the range starts or ends with last_id element.
	Reverse bool `protobuf:"varint,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *KeySetPageOptions) Reset() {
	*x = KeySetPageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySetPageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySetPageOptions) ProtoMessage() {}

func (x *KeySetPageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySetPageOptions.ProtoReflect.Descriptor instead.
func (*KeySetPageOptions) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *KeySetPageOptions) GetLastId() uint64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *KeySetPageOptions) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *KeySetPageOptions) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{1}
}

//* A message containing the current c13n version and build information.
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The semantic version of c13n.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	//* The commit descriptor of the build.
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	//* The commit hash of the build.
	CommitHash string `protobuf:"bytes,3,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Version) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

//* A message representing a node on the Lightning network.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* A node's Lightning alias.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	//* A node's Lightning address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *NodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//* Correponds to a query to retrieve the information of the underlying lightning node.
type SelfInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfInfoRequest) Reset() {
	*x = SelfInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfInfoRequest) ProtoMessage() {}

func (x *SelfInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfInfoRequest.ProtoReflect.Descriptor instead.
func (*SelfInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{4}
}

//* Represents a blockchain and network for a Lightning node.
type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The blockchain in use.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	//* The network a node is operating on.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Chain) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Chain) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

//* A SelfInfoResponse is received in response to a GetSelfInfo rpc call.
type SelfInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* General node information about the current node.
	Info *NodeInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	//* A list of chain networks the node is operating on.
	Chains []*Chain `protobuf:"bytes,2,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *SelfInfoResponse) Reset() {
	*x = SelfInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfInfoResponse) ProtoMessage() {}

func (x *SelfInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfInfoResponse.ProtoReflect.Descriptor instead.
func (*SelfInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *SelfInfoResponse) GetInfo() *NodeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SelfInfoResponse) GetChains() []*Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

//* Corresponds to a query to retrieve the balance of the underlying lightning node.
type SelfBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfBalanceRequest) Reset() {
	*x = SelfBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfBalanceRequest) ProtoMessage() {}

func (x *SelfBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfBalanceRequest.ProtoReflect.Descriptor instead.
func (*SelfBalanceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{7}
}

//* A SelfBalanceResponse is received in response to a GetSelfBalance rpc call.
type SelfBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The confirmed balance of the node's wallet (in satoshi).
	WalletConfirmedSat int64 `protobuf:"varint,1,opt,name=wallet_confirmed_sat,json=walletConfirmedSat,proto3" json:"wallet_confirmed_sat,omitempty"`
	//* The unconfirmed balance of the node's wallet (in satoshi).
	WalletUnconfirmedSat int64 `protobuf:"varint,2,opt,name=wallet_unconfirmed_sat,json=walletUnconfirmedSat,proto3" json:"wallet_unconfirmed_sat,omitempty"`
	//* The local balance available across all open channels (in millisatoshi).
	ChannelLocalMsat uint64 `protobuf:"varint,3,opt,name=channel_local_msat,json=channelLocalMsat,proto3" json:"channel_local_msat,omitempty"`
	//* The remote balance available across all open channels (in millisatoshi).
	ChannelRemoteMsat uint64 `protobuf:"varint,4,opt,name=channel_remote_msat,json=channelRemoteMsat,proto3" json:"channel_remote_msat,omitempty"`
	//* The local balance in pending open channels (in millisatoshi).
	PendingOpenLocalMsat uint64 `protobuf:"varint,5,opt,name=pending_open_local_msat,json=pendingOpenLocalMsat,proto3" json:"pending_open_local_msat,omitempty"`
	//* The remote balance in pending open channels (in millisatoshi).
	PendingOpenRemoteMsat uint64 `protobuf:"varint,6,opt,name=pending_open_remote_msat,json=pendingOpenRemoteMsat,proto3" json:"pending_open_remote_msat,omitempty"`
	//* The local balance unsettled across all open channels (in millisatoshi).
	UnsettledLocalMsat uint64 `protobuf:"varint,7,opt,name=unsettled_local_msat,json=unsettledLocalMsat,proto3" json:"unsettled_local_msat,omitempty"`
	//* The remote balance unsettled across all open channels (in millisatoshi).
	UnsettledRemoteMsat uint64 `protobuf:"varint,8,opt,name=unsettled_remote_msat,json=unsettledRemoteMsat,proto3" json:"unsettled_remote_msat,omitempty"`
}

func (x *SelfBalanceResponse) Reset() {
	*x = SelfBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfBalanceResponse) ProtoMessage() {}

func (x *SelfBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfBalanceResponse.ProtoReflect.Descriptor instead.
func (*SelfBalanceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *SelfBalanceResponse) GetWalletConfirmedSat() int64 {
	if x != nil {
		return x.WalletConfirmedSat
	}
	return 0
}

func (x *SelfBalanceResponse) GetWalletUnconfirmedSat() int64 {
	if x != nil {
		return x.WalletUnconfirmedSat
	}
	return 0
}

func (x *SelfBalanceResponse) GetChannelLocalMsat() uint64 {
	if x != nil {
		return x.ChannelLocalMsat
	}
	return 0
}

func (x *SelfBalanceResponse) GetChannelRemoteMsat() uint64 {
	if x != nil {
		return x.ChannelRemoteMsat
	}
	return 0
}

func (x *SelfBalanceResponse) GetPendingOpenLocalMsat() uint64 {
	if x != nil {
		return x.PendingOpenLocalMsat
	}
	return 0
}

func (x *SelfBalanceResponse) GetPendingOpenRemoteMsat() uint64 {
	if x != nil {
		return x.PendingOpenRemoteMsat
	}
	return 0
}

func (x *SelfBalanceResponse) GetUnsettledLocalMsat() uint64 {
	if x != nil {
		return x.UnsettledLocalMsat
	}
	return 0
}

func (x *SelfBalanceResponse) GetUnsettledRemoteMsat() uint64 {
	if x != nil {
		return x.UnsettledRemoteMsat
	}
	return 0
}

//* Corresponds to a request to list all nodes on the Lightning Network.
type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{9}
}

//* Corresponds to a node query based on node address.
type SearchNodeByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The node address to search.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SearchNodeByAddressRequest) Reset() {
	*x = SearchNodeByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeByAddressRequest) ProtoMessage() {}

func (x *SearchNodeByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeByAddressRequest.ProtoReflect.Descriptor instead.
func (*SearchNodeByAddressRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *SearchNodeByAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//* Corresponds to a node query based on node alias.
type SearchNodeByAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The node alias substring to search.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SearchNodeByAliasRequest) Reset() {
	*x = SearchNodeByAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNodeByAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNodeByAliasRequest) ProtoMessage() {}

func (x *SearchNodeByAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNodeByAliasRequest.ProtoReflect.Descriptor instead.
func (*SearchNodeByAliasRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *SearchNodeByAliasRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

//*
//A NodeInfoResponse is received in response to a node query.
//
//It contains all visible nodes corresponding to the query.
type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The list of Lightning nodes matching the query.
	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *NodeInfoResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

//* Corresponds to a request to create a peer connection with a node.
type ConnectNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The address of the node to connect.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//* The network location of the node.
	Hostport string `protobuf:"bytes,2,opt,name=hostport,proto3" json:"hostport,omitempty"`
}

func (x *ConnectNodeRequest) Reset() {
	*x = ConnectNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectNodeRequest) ProtoMessage() {}

func (x *ConnectNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectNodeRequest.ProtoReflect.Descriptor instead.
func (*ConnectNodeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectNodeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ConnectNodeRequest) GetHostport() string {
	if x != nil {
		return x.Hostport
	}
	return ""
}

//* A ConnectNodeResponse is received in response to a ConnectNode request.
type ConnectNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectNodeResponse) Reset() {
	*x = ConnectNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectNodeResponse) ProtoMessage() {}

func (x *ConnectNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectNodeResponse.ProtoReflect.Descriptor instead.
func (*ConnectNodeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{14}
}

//* Corresponds to a request to open a channel.
type OpenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The address of the node to open a channel to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//* The total amount to be committed to the channel (in millisatoshi).
	AmtMsat uint64 `protobuf:"varint,2,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* The amount to be sent to the other party (in millisatoshi).
	PushAmtMsat uint64 `protobuf:"varint,3,opt,name=push_amt_msat,json=pushAmtMsat,proto3" json:"push_amt_msat,omitempty"`
	//* The minimum number of confirmations
	//each input of the channel funding transaction must have.
	//
	//In case of a negative value being provided, unconfirmed funds can be used.
	MinInputConfs int32 `protobuf:"varint,4,opt,name=min_input_confs,json=minInputConfs,proto3" json:"min_input_confs,omitempty"`
	//* The number of blocks the funding transaction should confirm by.
	//
	//Used for fee estimation.
	TargetConfirmationBlock uint32 `protobuf:"varint,5,opt,name=target_confirmation_block,json=targetConfirmationBlock,proto3" json:"target_confirmation_block,omitempty"`
	//* The fee rate (satoshis per virtual byte) the funding transaction should cost.
	SatPerVbyte uint64 `protobuf:"varint,6,opt,name=sat_per_vbyte,json=satPerVbyte,proto3" json:"sat_per_vbyte,omitempty"`
}

func (x *OpenChannelRequest) Reset() {
	*x = OpenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelRequest) ProtoMessage() {}

func (x *OpenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *OpenChannelRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OpenChannelRequest) GetAmtMsat() uint64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *OpenChannelRequest) GetPushAmtMsat() uint64 {
	if x != nil {
		return x.PushAmtMsat
	}
	return 0
}

func (x *OpenChannelRequest) GetMinInputConfs() int32 {
	if x != nil {
		return x.MinInputConfs
	}
	return 0
}

func (x *OpenChannelRequest) GetTargetConfirmationBlock() uint32 {
	if x != nil {
		return x.TargetConfirmationBlock
	}
	return 0
}

func (x *OpenChannelRequest) GetSatPerVbyte() uint64 {
	if x != nil {
		return x.SatPerVbyte
	}
	return 0
}

//* An OpenChannelResponse is received in response to an OpenChannel call.
type OpenChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The channel funding transaction.
	FundingTxid string `protobuf:"bytes,1,opt,name=funding_txid,json=fundingTxid,proto3" json:"funding_txid,omitempty"`
	//* The output index of the funding transaction.
	OutputIndex uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *OpenChannelResponse) Reset() {
	*x = OpenChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelResponse) ProtoMessage() {}

func (x *OpenChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelResponse.ProtoReflect.Descriptor instead.
func (*OpenChannelResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *OpenChannelResponse) GetFundingTxid() string {
	if x != nil {
		return x.FundingTxid
	}
	return ""
}

func (x *OpenChannelResponse) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

//* A message representing a contact of the application.
type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The node corresponding to the contact.
	Node *NodeInfo `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	//* The contact id.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	//* A contact's chat nickname.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *ContactInfo) GetNode() *NodeInfo {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ContactInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContactInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

//* Corresponds to a request to list all contacts.
type GetContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetContactsRequest) Reset() {
	*x = GetContactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsRequest) ProtoMessage() {}

func (x *GetContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsRequest.ProtoReflect.Descriptor instead.
func (*GetContactsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{18}
}

//* A GetContactsResponse is received in response to a GetContacts rpc call.
type GetContactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The list of contacts in the database.
	Contacts []*ContactInfo `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *GetContactsResponse) Reset() {
	*x = GetContactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsResponse) ProtoMessage() {}

func (x *GetContactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsResponse.ProtoReflect.Descriptor instead.
func (*GetContactsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetContactsResponse) GetContacts() []*ContactInfo {
	if x != nil {
		return x.Contacts
	}
	return nil
}

//* Corresponds to a request to add a node as a contact.
type AddContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The node to add as a contact.
	Contact *ContactInfo `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *AddContactRequest) Reset() {
	*x = AddContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContactRequest) ProtoMessage() {}

func (x *AddContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContactRequest.ProtoReflect.Descriptor instead.
func (*AddContactRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *AddContactRequest) GetContact() *ContactInfo {
	if x != nil {
		return x.Contact
	}
	return nil
}

//* A AddContactResponse is received in response to an AddContact rpc call.
type AddContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The newly added contact's information.
	Contact *ContactInfo `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *AddContactResponse) Reset() {
	*x = AddContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContactResponse) ProtoMessage() {}

func (x *AddContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContactResponse.ProtoReflect.Descriptor instead.
func (*AddContactResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *AddContactResponse) GetContact() *ContactInfo {
	if x != nil {
		return x.Contact
	}
	return nil
}

//* Corresponds to a request to remove a contact.
type RemoveContactByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The id of the contact to remove.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveContactByIDRequest) Reset() {
	*x = RemoveContactByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveContactByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContactByIDRequest) ProtoMessage() {}

func (x *RemoveContactByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContactByIDRequest.ProtoReflect.Descriptor instead.
func (*RemoveContactByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveContactByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//* Corresponds to a request to remove a contact.
type RemoveContactByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The Lightning address of the contact to remove.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RemoveContactByAddressRequest) Reset() {
	*x = RemoveContactByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveContactByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContactByAddressRequest) ProtoMessage() {}

func (x *RemoveContactByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContactByAddressRequest.ProtoReflect.Descriptor instead.
func (*RemoveContactByAddressRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveContactByAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//* A RemoveContactResponse is received in response to a RemoveContactBy* rpc call.
type RemoveContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveContactResponse) Reset() {
	*x = RemoveContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContactResponse) ProtoMessage() {}

func (x *RemoveContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContactResponse.ProtoReflect.Descriptor instead.
func (*RemoveContactResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{24}
}

//* Represents a list of payments.
type Payments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The list of payments fulfilling a message.
	Payments []*Payment `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (x *Payments) Reset() {
	*x = Payments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payments) ProtoMessage() {}

func (x *Payments) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payments.ProtoReflect.Descriptor instead.
func (*Payments) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *Payments) GetPayments() []*Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

//* Represents a message sent over the Lightning network.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The unique id of the message.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* The discussion id this message is associated with.
	DiscussionId uint64 `protobuf:"varint,2,opt,name=discussion_id,json=discussionId,proto3" json:"discussion_id,omitempty"`
	//* The Lightning address of the sender node.
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	//* The Lightning address of the receiver node.
	// Deprecated: Do not use.
	Receiver string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	//* Whether the message sender was verified.
	SenderVerified bool `protobuf:"varint,11,opt,name=sender_verified,json=senderVerified,proto3" json:"sender_verified,omitempty"`
	//* The message payload.
	Payload string `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	//* The amount paid over this message (in millisatoshi).
	AmtMsat int64 `protobuf:"varint,6,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* The total routing fees paid for this message across all routes (in millisatoshi).
	//
	//This field is meaningful only for sent and estimated messages.
	//
	// Deprecated: Do not use.
	TotalFeesMsat int64 `protobuf:"varint,7,opt,name=total_fees_msat,json=totalFeesMsat,proto3" json:"total_fees_msat,omitempty"`
	//* The time the message was sent.
	SentTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
	//* The time the message was received.
	ReceivedTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	//* The routes that fulfilled this message.
	//
	//This field is meaningful only for sent and estimated messages.
	//
	// Deprecated: Do not use.
	PaymentRoutes []*PaymentRoute `protobuf:"bytes,10,rep,name=payment_routes,json=paymentRoutes,proto3" json:"payment_routes,omitempty"`
	//* The preimage belonging to the associated payment.
	//
	//This field is only meaningful for received messages and
	//messages sent successfully to non-group discussions.
	//
	// Deprecated: Do not use.
	Preimage string `protobuf:"bytes,12,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//* The payment request this message was paid to.
	//
	//If empty, corresponds to a spontaneous payment.
	//
	// Deprecated: Do not use.
	PayReq string `protobuf:"bytes,13,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
	//* The associated Lightning entity.
	// Types that are assignable to LightningData:
	//	*Message_Payments
	//	*Message_Invoice
	LightningData isMessage_LightningData `protobuf_oneof:"lightning_data"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *Message) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetDiscussionId() uint64 {
	if x != nil {
		return x.DiscussionId
	}
	return 0
}

func (x *Message) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

// Deprecated: Do not use.
func (x *Message) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Message) GetSenderVerified() bool {
	if x != nil {
		return x.SenderVerified
	}
	return false
}

func (x *Message) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Message) GetAmtMsat() int64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

// Deprecated: Do not use.
func (x *Message) GetTotalFeesMsat() int64 {
	if x != nil {
		return x.TotalFeesMsat
	}
	return 0
}

func (x *Message) GetSentTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTimestamp
	}
	return nil
}

func (x *Message) GetReceivedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return nil
}

// Deprecated: Do not use.
func (x *Message) GetPaymentRoutes() []*PaymentRoute {
	if x != nil {
		return x.PaymentRoutes
	}
	return nil
}

// Deprecated: Do not use.
func (x *Message) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

// Deprecated: Do not use.
func (x *Message) GetPayReq() string {
	if x != nil {
		return x.PayReq
	}
	return ""
}

func (m *Message) GetLightningData() isMessage_LightningData {
	if m != nil {
		return m.LightningData
	}
	return nil
}

func (x *Message) GetPayments() *Payments {
	if x, ok := x.GetLightningData().(*Message_Payments); ok {
		return x.Payments
	}
	return nil
}

func (x *Message) GetInvoice() *Invoice {
	if x, ok := x.GetLightningData().(*Message_Invoice); ok {
		return x.Invoice
	}
	return nil
}

type isMessage_LightningData interface {
	isMessage_LightningData()
}

type Message_Payments struct {
	Payments *Payments `protobuf:"bytes,14,opt,name=payments,proto3,oneof"`
}

type Message_Invoice struct {
	Invoice *Invoice `protobuf:"bytes,15,opt,name=invoice,proto3,oneof"`
}

func (*Message_Payments) isMessage_LightningData() {}

func (*Message_Invoice) isMessage_LightningData() {}

//* Represents a route fulfilling a payment HTLC.
type PaymentRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The list of hops for this route.
	Hops []*PaymentHop `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	//* The total timelock of the route.
	TotalTimelock uint32 `protobuf:"varint,2,opt,name=total_timelock,json=totalTimelock,proto3" json:"total_timelock,omitempty"`
	//* The amount sent via this route, disregarding the route fees (in millisatoshi).
	RouteAmtMsat int64 `protobuf:"varint,3,opt,name=route_amt_msat,json=routeAmtMsat,proto3" json:"route_amt_msat,omitempty"`
	//* The fees paid for this route (in millisatoshi).
	RouteFeesMsat int64 `protobuf:"varint,4,opt,name=route_fees_msat,json=routeFeesMsat,proto3" json:"route_fees_msat,omitempty"`
}

func (x *PaymentRoute) Reset() {
	*x = PaymentRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRoute) ProtoMessage() {}

func (x *PaymentRoute) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRoute.ProtoReflect.Descriptor instead.
func (*PaymentRoute) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *PaymentRoute) GetHops() []*PaymentHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *PaymentRoute) GetTotalTimelock() uint32 {
	if x != nil {
		return x.TotalTimelock
	}
	return 0
}

func (x *PaymentRoute) GetRouteAmtMsat() int64 {
	if x != nil {
		return x.RouteAmtMsat
	}
	return 0
}

func (x *PaymentRoute) GetRouteFeesMsat() int64 {
	if x != nil {
		return x.RouteFeesMsat
	}
	return 0
}

//* Represents a hop of a route of a message.
type PaymentHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The channel id.
	ChanId uint64 `protobuf:"varint,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	//* The address of the hop node.
	HopAddress string `protobuf:"bytes,2,opt,name=hop_address,json=hopAddress,proto3" json:"hop_address,omitempty"`
	//* The amount to be forwarded by the hop (in millisatoshi).
	AmtToForwardMsat int64 `protobuf:"varint,3,opt,name=amt_to_forward_msat,json=amtToForwardMsat,proto3" json:"amt_to_forward_msat,omitempty"`
	//* The fee to be paid to the hop for forwarding the message (in millisatoshi).
	FeeMsat int64 `protobuf:"varint,4,opt,name=fee_msat,json=feeMsat,proto3" json:"fee_msat,omitempty"`
}

func (x *PaymentHop) Reset() {
	*x = PaymentHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentHop) ProtoMessage() {}

func (x *PaymentHop) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentHop.ProtoReflect.Descriptor instead.
func (*PaymentHop) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *PaymentHop) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *PaymentHop) GetHopAddress() string {
	if x != nil {
		return x.HopAddress
	}
	return ""
}

func (x *PaymentHop) GetAmtToForwardMsat() int64 {
	if x != nil {
		return x.AmtToForwardMsat
	}
	return 0
}

func (x *PaymentHop) GetFeeMsat() int64 {
	if x != nil {
		return x.FeeMsat
	}
	return 0
}

//* Represents messaging options.
type MessageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The maximum fee allowed for a message (in millisatoshi).
	FeeLimitMsat int64 `protobuf:"varint,1,opt,name=fee_limit_msat,json=feeLimitMsat,proto3" json:"fee_limit_msat,omitempty"`
	//* Whether to include the sender address when sending a message.
	Anonymous bool `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (x *MessageOptions) Reset() {
	*x = MessageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOptions) ProtoMessage() {}

func (x *MessageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOptions.ProtoReflect.Descriptor instead.
func (*MessageOptions) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *MessageOptions) GetFeeLimitMsat() int64 {
	if x != nil {
		return x.FeeLimitMsat
	}
	return 0
}

func (x *MessageOptions) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

//* Corresponds to a request to estimate a message.
type EstimateMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id where the message is to be sent.
	DiscussionId uint64 `protobuf:"varint,1,opt,name=discussion_id,json=discussionId,proto3" json:"discussion_id,omitempty"`
	//* The message payload (as a string).
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	//* The intended payment amount to the recipient of the message (in millisatoshi).
	AmtMsat int64 `protobuf:"varint,3,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* The message option overrides for the current message.
	Options *MessageOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *EstimateMessageRequest) Reset() {
	*x = EstimateMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMessageRequest) ProtoMessage() {}

func (x *EstimateMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMessageRequest.ProtoReflect.Descriptor instead.
func (*EstimateMessageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *EstimateMessageRequest) GetDiscussionId() uint64 {
	if x != nil {
		return x.DiscussionId
	}
	return 0
}

func (x *EstimateMessageRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *EstimateMessageRequest) GetAmtMsat() int64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *EstimateMessageRequest) GetOptions() *MessageOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

//* A EstimateMessageResponse is received in response to a EstimateMessage rpc call.
type EstimateMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//The probability of successful arrival of the message,
	//as reported by the Lightning daemon's mission control.
	SuccessProb float64 `protobuf:"fixed64,1,opt,name=success_prob,json=successProb,proto3" json:"success_prob,omitempty"`
	//* Contains the estimated route and fees for the requested message.
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EstimateMessageResponse) Reset() {
	*x = EstimateMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMessageResponse) ProtoMessage() {}

func (x *EstimateMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMessageResponse.ProtoReflect.Descriptor instead.
func (*EstimateMessageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *EstimateMessageResponse) GetSuccessProb() float64 {
	if x != nil {
		return x.SuccessProb
	}
	return 0
}

func (x *EstimateMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

//* Corresponds to a request to send a message.
type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id where the message is to be sent.
	DiscussionId uint64 `protobuf:"varint,1,opt,name=discussion_id,json=discussionId,proto3" json:"discussion_id,omitempty"`
	//* The message payload (as a string).
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	//* The intended payment amount to the recipient of the message (in millisatoshi).
	AmtMsat int64 `protobuf:"varint,3,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* A payment request (invoice) to pay to.
	//
	//If empty, a spontaneous message is sent.
	//If specified, discussion_id is not used and should not be specified.
	//Instead, the message will be sent to the discussion associated with
	//the recipient specified by the the payment request (which will be
	//created if it does not exist).
	//The discussion_id will be returned in the response.
	PayReq string `protobuf:"bytes,5,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
	//* The message option overrides for the current message.
	Options *MessageOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *SendMessageRequest) GetDiscussionId() uint64 {
	if x != nil {
		return x.DiscussionId
	}
	return 0
}

func (x *SendMessageRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendMessageRequest) GetAmtMsat() int64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *SendMessageRequest) GetPayReq() string {
	if x != nil {
		return x.PayReq
	}
	return ""
}

func (x *SendMessageRequest) GetOptions() *MessageOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

//* A SendMessageResponse is received in response to a SendMessage rpc call.
type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The sent message.
	SentMessage *Message `protobuf:"bytes,1,opt,name=sent_message,json=sentMessage,proto3" json:"sent_message,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *SendMessageResponse) GetSentMessage() *Message {
	if x != nil {
		return x.SentMessage
	}
	return nil
}

//*
//Corresponds to a request to create a stream
//over which to be notified of received messages.
type SubscribeMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeMessageRequest) Reset() {
	*x = SubscribeMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMessageRequest) ProtoMessage() {}

func (x *SubscribeMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMessageRequest.ProtoReflect.Descriptor instead.
func (*SubscribeMessageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{34}
}

//*
//A SubscribeMessageResponse is received in the stream returned in response to
//a SubscribeMessages rpc call, and represents a received message.
type SubscribeMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The received message.
	ReceivedMessage *Message `protobuf:"bytes,1,opt,name=received_message,json=receivedMessage,proto3" json:"received_message,omitempty"`
}

func (x *SubscribeMessageResponse) Reset() {
	*x = SubscribeMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMessageResponse) ProtoMessage() {}

func (x *SubscribeMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMessageResponse.ProtoReflect.Descriptor instead.
func (*SubscribeMessageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *SubscribeMessageResponse) GetReceivedMessage() *Message {
	if x != nil {
		return x.ReceivedMessage
	}
	return nil
}

//* Represents the information for a specific discussion.
type DiscussionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* The list of participants in the discussion.
	Participants []string `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	//* The default options applicable for all discussion messages.
	Options *DiscussionOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	//* The id of the last read message in the discussion.
	LastReadMsgId uint64 `protobuf:"varint,4,opt,name=last_read_msg_id,json=lastReadMsgId,proto3" json:"last_read_msg_id,omitempty"`
	//* The id of the last discussion message.
	LastMsgId uint64 `protobuf:"varint,5,opt,name=last_msg_id,json=lastMsgId,proto3" json:"last_msg_id,omitempty"`
}

func (x *DiscussionInfo) Reset() {
	*x = DiscussionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussionInfo) ProtoMessage() {}

func (x *DiscussionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussionInfo.ProtoReflect.Descriptor instead.
func (*DiscussionInfo) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *DiscussionInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DiscussionInfo) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *DiscussionInfo) GetOptions() *DiscussionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *DiscussionInfo) GetLastReadMsgId() uint64 {
	if x != nil {
		return x.LastReadMsgId
	}
	return 0
}

func (x *DiscussionInfo) GetLastMsgId() uint64 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

//* DiscussionOptions represents the per-discussion options.
type DiscussionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The maximum fee allowed for sending a message (in millisatoshi).
	//
	//If not set, the default fee limit, as defined in the app package, is used.
	FeeLimitMsat int64 `protobuf:"varint,1,opt,name=fee_limit_msat,json=feeLimitMsat,proto3" json:"fee_limit_msat,omitempty"`
	//* Whether to send as anonymous on this discussion.
	Anonymous bool `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (x *DiscussionOptions) Reset() {
	*x = DiscussionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussionOptions) ProtoMessage() {}

func (x *DiscussionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussionOptions.ProtoReflect.Descriptor instead.
func (*DiscussionOptions) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *DiscussionOptions) GetFeeLimitMsat() int64 {
	if x != nil {
		return x.FeeLimitMsat
	}
	return 0
}

func (x *DiscussionOptions) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

//* Corresponds to a request to receive all discussion info.
type GetDiscussionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDiscussionsRequest) Reset() {
	*x = GetDiscussionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionsRequest) ProtoMessage() {}

func (x *GetDiscussionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionsRequest.ProtoReflect.Descriptor instead.
func (*GetDiscussionsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{38}
}

//*
//A GetDiscussionsResponse is received in the stream returned in response
//to a GetDiscussions rpc call, and represents a discussion.
type GetDiscussionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discussion *DiscussionInfo `protobuf:"bytes,1,opt,name=discussion,proto3" json:"discussion,omitempty"`
}

func (x *GetDiscussionsResponse) Reset() {
	*x = GetDiscussionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionsResponse) ProtoMessage() {}

func (x *GetDiscussionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionsResponse.ProtoReflect.Descriptor instead.
func (*GetDiscussionsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetDiscussionsResponse) GetDiscussion() *DiscussionInfo {
	if x != nil {
		return x.Discussion
	}
	return nil
}

//*
//Corresponds to a request to create a stream over which to receive
//previously exchanged messages of the identified discussion.
type GetDiscussionHistoryByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id of interest.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* The pagination options of the request.
	PageOptions *KeySetPageOptions `protobuf:"bytes,2,opt,name=page_options,json=pageOptions,proto3" json:"page_options,omitempty"`
}

func (x *GetDiscussionHistoryByIDRequest) Reset() {
	*x = GetDiscussionHistoryByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionHistoryByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionHistoryByIDRequest) ProtoMessage() {}

func (x *GetDiscussionHistoryByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionHistoryByIDRequest.ProtoReflect.Descriptor instead.
func (*GetDiscussionHistoryByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetDiscussionHistoryByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDiscussionHistoryByIDRequest) GetPageOptions() *KeySetPageOptions {
	if x != nil {
		return x.PageOptions
	}
	return nil
}

//*
//A GetDiscussionHistoryResponse is received in response to
//a GetHistory rpc call, and represents an exchanged message.
type GetDiscussionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The exchanged message.
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetDiscussionHistoryResponse) Reset() {
	*x = GetDiscussionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionHistoryResponse) ProtoMessage() {}

func (x *GetDiscussionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetDiscussionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetDiscussionHistoryResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

//*
//Corresponds to a request for statistics about the requested
//discussion, identified by its id.
type GetDiscussionStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDiscussionStatisticsRequest) Reset() {
	*x = GetDiscussionStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionStatisticsRequest) ProtoMessage() {}

func (x *GetDiscussionStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetDiscussionStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetDiscussionStatisticsRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//*
//A GetDiscussionStatisticsResponse is received in response to
//a GetDiscussionStatistics rpc call.
type GetDiscussionStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The total amount sent in the discussion (in millisatoshi).
	AmtMsatSent uint64 `protobuf:"varint,1,opt,name=amt_msat_sent,json=amtMsatSent,proto3" json:"amt_msat_sent,omitempty"`
	//* The total amount received in the discussion (in millisatoshi).
	AmtMsatReceived uint64 `protobuf:"varint,2,opt,name=amt_msat_received,json=amtMsatReceived,proto3" json:"amt_msat_received,omitempty"`
	//* The total amount of fees for sent messages in the discussion (in millisatoshi).
	AmtMsatFees uint64 `protobuf:"varint,3,opt,name=amt_msat_fees,json=amtMsatFees,proto3" json:"amt_msat_fees,omitempty"`
	//* The total amount of sent messages in the discussion.
	MessagesSent uint64 `protobuf:"varint,4,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	//* The total amount of received messages in the discussion.
	MessagesReceived uint64 `protobuf:"varint,5,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
}

func (x *GetDiscussionStatisticsResponse) Reset() {
	*x = GetDiscussionStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscussionStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscussionStatisticsResponse) ProtoMessage() {}

func (x *GetDiscussionStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscussionStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetDiscussionStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *GetDiscussionStatisticsResponse) GetAmtMsatSent() uint64 {
	if x != nil {
		return x.AmtMsatSent
	}
	return 0
}

func (x *GetDiscussionStatisticsResponse) GetAmtMsatReceived() uint64 {
	if x != nil {
		return x.AmtMsatReceived
	}
	return 0
}

func (x *GetDiscussionStatisticsResponse) GetAmtMsatFees() uint64 {
	if x != nil {
		return x.AmtMsatFees
	}
	return 0
}

func (x *GetDiscussionStatisticsResponse) GetMessagesSent() uint64 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

func (x *GetDiscussionStatisticsResponse) GetMessagesReceived() uint64 {
	if x != nil {
		return x.MessagesReceived
	}
	return 0
}

//* Corresponds to a request to add a discussion to database.
type AddDiscussionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discussion *DiscussionInfo `protobuf:"bytes,1,opt,name=discussion,proto3" json:"discussion,omitempty"`
}

func (x *AddDiscussionRequest) Reset() {
	*x = AddDiscussionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiscussionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiscussionRequest) ProtoMessage() {}

func (x *AddDiscussionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiscussionRequest.ProtoReflect.Descriptor instead.
func (*AddDiscussionRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *AddDiscussionRequest) GetDiscussion() *DiscussionInfo {
	if x != nil {
		return x.Discussion
	}
	return nil
}

//* An AddDiscussionResponse is received in response to an AddDiscussion rpc call.
type AddDiscussionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discussion *DiscussionInfo `protobuf:"bytes,1,opt,name=discussion,proto3" json:"discussion,omitempty"`
}

func (x *AddDiscussionResponse) Reset() {
	*x = AddDiscussionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiscussionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiscussionResponse) ProtoMessage() {}

func (x *AddDiscussionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiscussionResponse.ProtoReflect.Descriptor instead.
func (*AddDiscussionResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *AddDiscussionResponse) GetDiscussion() *DiscussionInfo {
	if x != nil {
		return x.Discussion
	}
	return nil
}

//* Represents a request to update the last read discussion message.
type UpdateDiscussionLastReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The discussion id.
	DiscussionId uint64 `protobuf:"varint,1,opt,name=discussion_id,json=discussionId,proto3" json:"discussion_id,omitempty"`
	//* The message id to mark as the last read.
	LastReadMsgId uint64 `protobuf:"varint,2,opt,name=last_read_msg_id,json=lastReadMsgId,proto3" json:"last_read_msg_id,omitempty"`
}

func (x *UpdateDiscussionLastReadRequest) Reset() {
	*x = UpdateDiscussionLastReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscussionLastReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscussionLastReadRequest) ProtoMessage() {}

func (x *UpdateDiscussionLastReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscussionLastReadRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscussionLastReadRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateDiscussionLastReadRequest) GetDiscussionId() uint64 {
	if x != nil {
		return x.DiscussionId
	}
	return 0
}

func (x *UpdateDiscussionLastReadRequest) GetLastReadMsgId() uint64 {
	if x != nil {
		return x.LastReadMsgId
	}
	return 0
}

//*
//An UpdateDiscussionResponse is returned in reponse
//to an UpdateDiscussionLastRead request.
type UpdateDiscussionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDiscussionResponse) Reset() {
	*x = UpdateDiscussionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscussionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscussionResponse) ProtoMessage() {}

func (x *UpdateDiscussionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscussionResponse.ProtoReflect.Descriptor instead.
func (*UpdateDiscussionResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{47}
}

//* Corresponds to a request to remove a discussion.
type RemoveDiscussionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The id of the discussion to remove.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveDiscussionRequest) Reset() {
	*x = RemoveDiscussionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDiscussionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDiscussionRequest) ProtoMessage() {}

func (x *RemoveDiscussionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDiscussionRequest.ProtoReflect.Descriptor instead.
func (*RemoveDiscussionRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *RemoveDiscussionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//* A RemoveDiscussionResponse is received in response to a RemoveDiscussion rpc call.
type RemoveDiscussionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDiscussionResponse) Reset() {
	*x = RemoveDiscussionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDiscussionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDiscussionResponse) ProtoMessage() {}

func (x *RemoveDiscussionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDiscussionResponse.ProtoReflect.Descriptor instead.
func (*RemoveDiscussionResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{49}
}

//* Corresponds to an invoice creation request.
type CreateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Memo of the invoice.
	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	//* The invoice amount (in millisatoshi).
	AmtMsat uint64 `protobuf:"varint,2,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* Invoice expiry time (in seconds since creation).
	Expiry int64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	//* Whether to include hints for private channels.
	Private bool `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *CreateInvoiceRequest) Reset() {
	*x = CreateInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceRequest) ProtoMessage() {}

func (x *CreateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *CreateInvoiceRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateInvoiceRequest) GetAmtMsat() uint64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *CreateInvoiceRequest) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *CreateInvoiceRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

//* A CreateInvoiceResponse is received in response to an invoice creation request.
type CreateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The created invoice.
	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *CreateInvoiceResponse) Reset() {
	*x = CreateInvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceResponse) ProtoMessage() {}

func (x *CreateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*CreateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *CreateInvoiceResponse) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

//* Corresponds to an invoice lookup request.
type LookupInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Payment Request
	PayReq string `protobuf:"bytes,1,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
}

func (x *LookupInvoiceRequest) Reset() {
	*x = LookupInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupInvoiceRequest) ProtoMessage() {}

func (x *LookupInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupInvoiceRequest.ProtoReflect.Descriptor instead.
func (*LookupInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *LookupInvoiceRequest) GetPayReq() string {
	if x != nil {
		return x.PayReq
	}
	return ""
}

//* A LookupResponse is received in response to an invoice lookup request.
type LookupInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The returned invoice.
	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *LookupInvoiceResponse) Reset() {
	*x = LookupInvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupInvoiceResponse) ProtoMessage() {}

func (x *LookupInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupInvoiceResponse.ProtoReflect.Descriptor instead.
func (*LookupInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{53}
}

func (x *LookupInvoiceResponse) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

//* Corresponds to a pay request.
type PayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//	*PayRequest_PayReq
	//	*PayRequest_Address
	Destination isPayRequest_Destination `protobuf_oneof:"destination"`
	//* The payment amount (in millisatoshi).
	AmtMsat uint64 `protobuf:"varint,3,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* The payment options.
	Options *PaymentOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *PayRequest) Reset() {
	*x = PayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRequest) ProtoMessage() {}

func (x *PayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRequest.ProtoReflect.Descriptor instead.
func (*PayRequest) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{54}
}

func (m *PayRequest) GetDestination() isPayRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *PayRequest) GetPayReq() string {
	if x, ok := x.GetDestination().(*PayRequest_PayReq); ok {
		return x.PayReq
	}
	return ""
}

func (x *PayRequest) GetAddress() string {
	if x, ok := x.GetDestination().(*PayRequest_Address); ok {
		return x.Address
	}
	return ""
}

func (x *PayRequest) GetAmtMsat() uint64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *PayRequest) GetOptions() *PaymentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type isPayRequest_Destination interface {
	isPayRequest_Destination()
}

type PayRequest_PayReq struct {
	//* The payment request to pay to.
	PayReq string `protobuf:"bytes,1,opt,name=pay_req,json=payReq,proto3,oneof"`
}

type PayRequest_Address struct {
	//* The address to pay to.
	Address string `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

func (*PayRequest_PayReq) isPayRequest_Destination() {}

func (*PayRequest_Address) isPayRequest_Destination() {}

//* PaymentOptions represents the payment's options.
type PaymentOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The maximum fee allowed for sending a payment.
	FeeLimitMsat int64 `protobuf:"varint,1,opt,name=fee_limit_msat,json=feeLimitMsat,proto3" json:"fee_limit_msat,omitempty"`
}

func (x *PaymentOptions) Reset() {
	*x = PaymentOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentOptions) ProtoMessage() {}

func (x *PaymentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentOptions.ProtoReflect.Descriptor instead.
func (*PaymentOptions) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{55}
}

func (x *PaymentOptions) GetFeeLimitMsat() int64 {
	if x != nil {
		return x.FeeLimitMsat
	}
	return 0
}

//* A PayResponse is received in response to a pay request.
type PayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The returned payment.
	Payment *Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *PayResponse) Reset() {
	*x = PayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayResponse) ProtoMessage() {}

func (x *PayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayResponse.ProtoReflect.Descriptor instead.
func (*PayResponse) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *PayResponse) GetPayment() *Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

//* Represents a Lightning network payment.
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The payment hash of the payment.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	//* The preimage of the payment hash.
	Preimage string `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//* The payment amount.
	AmtMsat uint64 `protobuf:"varint,3,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* The time the payment was created.
	CreatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	//* The time the payment was finalized.
	ResolvedTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=resolved_timestamp,json=resolvedTimestamp,proto3" json:"resolved_timestamp,omitempty"`
	//* The fulfilled payment request (if any).
	PayReq string `protobuf:"bytes,6,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
	//* The payment state.
	State PaymentState `protobuf:"varint,7,opt,name=state,proto3,enum=services.PaymentState" json:"state,omitempty"`
	//* The payment index.
	PaymentIndex uint64 `protobuf:"varint,8,opt,name=payment_index,json=paymentIndex,proto3" json:"payment_index,omitempty"`
	//* The payment HTLCs.
	HTLCs []*PaymentHTLC `protobuf:"bytes,9,rep,name=HTLCs,proto3" json:"HTLCs,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *Payment) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Payment) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

func (x *Payment) GetAmtMsat() uint64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *Payment) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *Payment) GetResolvedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedTimestamp
	}
	return nil
}

func (x *Payment) GetPayReq() string {
	if x != nil {
		return x.PayReq
	}
	return ""
}

func (x *Payment) GetState() PaymentState {
	if x != nil {
		return x.State
	}
	return PaymentState_PAYMENT_UNKNOWN
}

func (x *Payment) GetPaymentIndex() uint64 {
	if x != nil {
		return x.PaymentIndex
	}
	return 0
}

func (x *Payment) GetHTLCs() []*PaymentHTLC {
	if x != nil {
		return x.HTLCs
	}
	return nil
}

//* Represents an HTLC attempt of a payment.
type PaymentHTLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The route of the HTLC.
	Route *PaymentRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	//* The time the HTLC was sent.
	AttemptTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=attempt_timestamp,json=attemptTimestamp,proto3" json:"attempt_timestamp,omitempty"`
	//* The time the HTLC was resolved.
	ResolveTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=resolve_timestamp,json=resolveTimestamp,proto3" json:"resolve_timestamp,omitempty"`
	//* The HTLC state.
	State HTLCState `protobuf:"varint,4,opt,name=state,proto3,enum=services.HTLCState" json:"state,omitempty"`
	//* The preimage used to settle the HTLC.
	Preimage string `protobuf:"bytes,5,opt,name=preimage,proto3" json:"preimage,omitempty"`
}

func (x *PaymentHTLC) Reset() {
	*x = PaymentHTLC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentHTLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentHTLC) ProtoMessage() {}

func (x *PaymentHTLC) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentHTLC.ProtoReflect.Descriptor instead.
func (*PaymentHTLC) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *PaymentHTLC) GetRoute() *PaymentRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *PaymentHTLC) GetAttemptTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AttemptTimestamp
	}
	return nil
}

func (x *PaymentHTLC) GetResolveTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolveTimestamp
	}
	return nil
}

func (x *PaymentHTLC) GetState() HTLCState {
	if x != nil {
		return x.State
	}
	return HTLCState_HTLC_IN_FLIGHT
}

func (x *PaymentHTLC) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

//* Represents an Lightning network invoice.
type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The invoice memo.
	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	//* The preimage hash.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	//* The invoice preimage.
	Preimage string `protobuf:"bytes,3,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//* The payment request of the invoice.
	PaymentRequest string `protobuf:"bytes,4,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	//* The value (amount requested) of the invoice (in millisatoshi).
	ValueMsat uint64 `protobuf:"varint,5,opt,name=value_msat,json=valueMsat,proto3" json:"value_msat,omitempty"`
	//* The amount paid to the invoice (in millisatoshi).
	AmtPaidMsat uint64 `protobuf:"varint,6,opt,name=amt_paid_msat,json=amtPaidMsat,proto3" json:"amt_paid_msat,omitempty"`
	//* The time the invoice was created.
	CreatedTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	//* The time the invoice was settled.
	SettledTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=settled_timestamp,json=settledTimestamp,proto3" json:"settled_timestamp,omitempty"`
	//* The invoice expiry (in seconds since creation time).
	Expiry int64 `protobuf:"varint,9,opt,name=expiry,proto3" json:"expiry,omitempty"`
	//* Whether the invoice contains hints for private channels.
	Private bool `protobuf:"varint,10,opt,name=private,proto3" json:"private,omitempty"`
	//* Invoice route hints.
	RouteHints []*RouteHint `protobuf:"bytes,11,rep,name=route_hints,json=routeHints,proto3" json:"route_hints,omitempty"`
	//* The invoice state.
	State InvoiceState `protobuf:"varint,12,opt,name=state,proto3,enum=services.InvoiceState" json:"state,omitempty"`
	//* The add index of the invoice.
	AddIndex uint64 `protobuf:"varint,13,opt,name=add_index,json=addIndex,proto3" json:"add_index,omitempty"`
	//* The settle index of the invoice.
	SettleIndex uint64 `protobuf:"varint,14,opt,name=settle_index,json=settleIndex,proto3" json:"settle_index,omitempty"`
	//* The set of HTLCs paying to the invoice.
	InvoiceHtlcs []*InvoiceHTLC `protobuf:"bytes,15,rep,name=invoice_htlcs,json=invoiceHtlcs,proto3" json:"invoice_htlcs,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{59}
}

func (x *Invoice) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Invoice) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Invoice) GetPreimage() string {
	if x != nil {
		return x.Preimage
	}
	return ""
}

func (x *Invoice) GetPaymentRequest() string {
	if x != nil {
		return x.PaymentRequest
	}
	return ""
}

func (x *Invoice) GetValueMsat() uint64 {
	if x != nil {
		return x.ValueMsat
	}
	return 0
}

func (x *Invoice) GetAmtPaidMsat() uint64 {
	if x != nil {
		return x.AmtPaidMsat
	}
	return 0
}

func (x *Invoice) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *Invoice) GetSettledTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledTimestamp
	}
	return nil
}

func (x *Invoice) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Invoice) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Invoice) GetRouteHints() []*RouteHint {
	if x != nil {
		return x.RouteHints
	}
	return nil
}

func (x *Invoice) GetState() InvoiceState {
	if x != nil {
		return x.State
	}
	return InvoiceState_INVOICE_OPEN
}

func (x *Invoice) GetAddIndex() uint64 {
	if x != nil {
		return x.AddIndex
	}
	return 0
}

func (x *Invoice) GetSettleIndex() uint64 {
	if x != nil {
		return x.SettleIndex
	}
	return 0
}

func (x *Invoice) GetInvoiceHtlcs() []*InvoiceHTLC {
	if x != nil {
		return x.InvoiceHtlcs
	}
	return nil
}

//* Represents a route hint for assistance in invoice payment.
type RouteHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* A chain of hop hints that can reach the desetination.
	HopHints []*HopHint `protobuf:"bytes,1,rep,name=hop_hints,json=hopHints,proto3" json:"hop_hints,omitempty"`
}

func (x *RouteHint) Reset() {
	*x = RouteHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteHint) ProtoMessage() {}

func (x *RouteHint) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteHint.ProtoReflect.Descriptor instead.
func (*RouteHint) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{60}
}

func (x *RouteHint) GetHopHints() []*HopHint {
	if x != nil {
		return x.HopHints
	}
	return nil
}

//* Represents a hop hint.
type HopHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Public key of hop ingress node.
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	//* The short channel id of the channel to be used for the hop.
	ChanId uint64 `protobuf:"varint,2,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	//* The base fee of the channel (in millisatoshi).
	FeeBaseMsat uint32 `protobuf:"varint,3,opt,name=fee_base_msat,json=feeBaseMsat,proto3" json:"fee_base_msat,omitempty"`
	//* The fee rate of the channel (in microsatoshi/sat).
	FeeRate uint32 `protobuf:"varint,4,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	//* The timelock delta of the channel.
	CltvExpiryDelta uint32 `protobuf:"varint,5,opt,name=cltv_expiry_delta,json=cltvExpiryDelta,proto3" json:"cltv_expiry_delta,omitempty"`
}

func (x *HopHint) Reset() {
	*x = HopHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopHint) ProtoMessage() {}

func (x *HopHint) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopHint.ProtoReflect.Descriptor instead.
func (*HopHint) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{61}
}

func (x *HopHint) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *HopHint) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *HopHint) GetFeeBaseMsat() uint32 {
	if x != nil {
		return x.FeeBaseMsat
	}
	return 0
}

func (x *HopHint) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *HopHint) GetCltvExpiryDelta() uint32 {
	if x != nil {
		return x.CltvExpiryDelta
	}
	return 0
}

//* Represents an HTLC paying to an invoice.
type InvoiceHTLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The short channel id of the channel the HTLC was arrived.
	ChanId uint64 `protobuf:"varint,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	//* The amount of this HTLC (in millisatoshi).
	AmtMsat uint64 `protobuf:"varint,2,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//* State of the HTLC.
	State InvoiceHTLCState `protobuf:"varint,3,opt,name=state,proto3,enum=services.InvoiceHTLCState" json:"state,omitempty"`
	//* HTLC accept timestamp.
	AcceptTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=accept_timestamp,json=acceptTimestamp,proto3" json:"accept_timestamp,omitempty"`
	//* HTLC resolve timestamp.
	ResolveTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=resolve_timestamp,json=resolveTimestamp,proto3" json:"resolve_timestamp,omitempty"`
	//* Block height at which this HTLC expires.
	ExpiryHeight int32 `protobuf:"varint,6,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
}

func (x *InvoiceHTLC) Reset() {
	*x = InvoiceHTLC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_services_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceHTLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceHTLC) ProtoMessage() {}

func (x *InvoiceHTLC) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_services_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceHTLC.ProtoReflect.Descriptor instead.
func (*InvoiceHTLC) Descriptor() ([]byte, []int) {
	return file_rpc_services_rpc_proto_rawDescGZIP(), []int{62}
}

func (x *InvoiceHTLC) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *InvoiceHTLC) GetAmtMsat() uint64 {
	if x != nil {
		return x.AmtMsat
	}
	return 0
}

func (x *InvoiceHTLC) GetState() InvoiceHTLCState {
	if x != nil {
		return x.State
	}
	return InvoiceHTLCState_INVOICE_HTLC_ACCEPTED
}

func (x *InvoiceHTLC) GetAcceptTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptTimestamp
	}
	return nil
}

func (x *InvoiceHTLC) GetResolveTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolveTimestamp
	}
	return nil
}

func (x *InvoiceHTLC) GetExpiryHeight() int32 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

var File_rpc_services_rpc_proto protoreflect.FileDescriptor

var file_rpc_services_rpc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x11, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x52, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x0a, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d, 0x24, 0x20, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0x6b, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xb1, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53, 0x61, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x53, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x0a,
	0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d, 0x24, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x0a, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x36, 0x36, 0x7d, 0x24, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x41, 0x6d, 0x74, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x76, 0x62, 0x79, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x56, 0x62, 0x79, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x78, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x78, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x22, 0x4c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x4d,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x32, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x51, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x0a, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d, 0x24, 0x20, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a,
	0x08, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbb, 0x05, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x0a,
	0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d, 0x24, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x18, 0x01, 0xe2, 0xdf, 0x1f,
	0x12, 0x0a, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d,
	0x24, 0x20, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x21, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0x18, 0x01,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0b, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x0a, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x36, 0x36, 0x7d, 0x24, 0x52, 0x0a, 0x68, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x6d, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x61, 0x6d, 0x74, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x4d, 0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x65, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x22,
	0x54, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x33, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x19, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x60, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66,
	0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6d, 0x74,
	0x4d, 0x73, 0x61, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x46, 0x65, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x6f, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x22, 0x44, 0x0a, 0x15, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x22, 0x3a, 0x0a,
	0x0b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2b, 0x0a, 0x05, 0x48, 0x54, 0x4c, 0x43, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x54, 0x4c, 0x43, 0x52, 0x05, 0x48, 0x54, 0x4c, 0x43, 0x73, 0x22, 0x94, 0x02,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x54, 0x4c, 0x43, 0x12, 0x2c, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x48, 0x54, 0x4c, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6d, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6d, 0x74, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x48, 0x54, 0x4c, 0x43, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x74, 0x6c, 0x63, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x48, 0x6f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x74, 0x76, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x74, 0x76, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x54, 0x4c, 0x43, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x54, 0x4c, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2a, 0x64, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x09, 0x48, 0x54,
	0x4c, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x54, 0x4c, 0x43, 0x5f,
	0x49, 0x4e, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x54, 0x4c, 0x43, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x62, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48,
	0x54, 0x4c, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x48,
	0x54, 0x4c, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0xac, 0x04, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6c, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5e, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xeb, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x98, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x32, 0xef, 0x04, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xee, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x31, 0x33, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x31, 0x33, 0x6e, 0x2d,
	0x67, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_services_rpc_proto_rawDescOnce sync.Once
	file_rpc_services_rpc_proto_rawDescData = file_rpc_services_rpc_proto_rawDesc
)

func file_rpc_services_rpc_proto_rawDescGZIP() []byte {
	file_rpc_services_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_services_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_services_rpc_proto_rawDescData)
	})
	return file_rpc_services_rpc_proto_rawDescData
}

var file_rpc_services_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rpc_services_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_rpc_services_rpc_proto_goTypes = []interface{}{
	(PaymentState)(0),                       // 0: services.PaymentState
	(HTLCState)(0),                          // 1: services.HTLCState
	(InvoiceState)(0),                       // 2: services.InvoiceState
	(InvoiceHTLCState)(0),                   // 3: services.InvoiceHTLCState
	(*KeySetPageOptions)(nil),               // 4: services.KeySetPageOptions
	(*VersionRequest)(nil),                  // 5: services.VersionRequest
	(*Version)(nil),                         // 6: services.Version
	(*NodeInfo)(nil),                        // 7: services.NodeInfo
	(*SelfInfoRequest)(nil),                 // 8: services.SelfInfoRequest
	(*Chain)(nil),                           // 9: services.Chain
	(*SelfInfoResponse)(nil),                // 10: services.SelfInfoResponse
	(*SelfBalanceRequest)(nil),              // 11: services.SelfBalanceRequest
	(*SelfBalanceResponse)(nil),             // 12: services.SelfBalanceResponse
	(*GetNodesRequest)(nil),                 // 13: services.GetNodesRequest
	(*SearchNodeByAddressRequest)(nil),      // 14: services.SearchNodeByAddressRequest
	(*SearchNodeByAliasRequest)(nil),        // 15: services.SearchNodeByAliasRequest
	(*NodeInfoResponse)(nil),                // 16: services.NodeInfoResponse
	(*ConnectNodeRequest)(nil),              // 17: services.ConnectNodeRequest
	(*ConnectNodeResponse)(nil),             // 18: services.ConnectNodeResponse
	(*OpenChannelRequest)(nil),              // 19: services.OpenChannelRequest
	(*OpenChannelResponse)(nil),             // 20: services.OpenChannelResponse
	(*ContactInfo)(nil),                     // 21: services.ContactInfo
	(*GetContactsRequest)(nil),              // 22: services.GetContactsRequest
	(*GetContactsResponse)(nil),             // 23: services.GetContactsResponse
	(*AddContactRequest)(nil),               // 24: services.AddContactRequest
	(*AddContactResponse)(nil),              // 25: services.AddContactResponse
	(*RemoveContactByIDRequest)(nil),        // 26: services.RemoveContactByIDRequest
	(*RemoveContactByAddressRequest)(nil),   // 27: services.RemoveContactByAddressRequest
	(*RemoveContactResponse)(nil),           // 28: services.RemoveContactResponse
	(*Payments)(nil),                        // 29: services.Payments
	(*Message)(nil),                         // 30: services.Message
	(*PaymentRoute)(nil),                    // 31: services.PaymentRoute
	(*PaymentHop)(nil),                      // 32: services.PaymentHop
	(*MessageOptions)(nil),                  // 33: services.MessageOptions
	(*EstimateMessageRequest)(nil),          // 34: services.EstimateMessageRequest
	(*EstimateMessageResponse)(nil),         // 35: services.EstimateMessageResponse
	(*SendMessageRequest)(nil),              // 36: services.SendMessageRequest
	(*SendMessageResponse)(nil),             // 37: services.SendMessageResponse
	(*SubscribeMessageRequest)(nil),         // 38: services.SubscribeMessageRequest
	(*SubscribeMessageResponse)(nil),        // 39: services.SubscribeMessageResponse
	(*DiscussionInfo)(nil),                  // 40: services.DiscussionInfo
	(*DiscussionOptions)(nil),               // 41: services.DiscussionOptions
	(*GetDiscussionsRequest)(nil),           // 42: services.GetDiscussionsRequest
	(*GetDiscussionsResponse)(nil),          // 43: services.GetDiscussionsResponse
	(*GetDiscussionHistoryByIDRequest)(nil), // 44: services.GetDiscussionHistoryByIDRequest
	(*GetDiscussionHistoryResponse)(nil),    // 45: services.GetDiscussionHistoryResponse
	(*GetDiscussionStatisticsRequest)(nil),  // 46: services.GetDiscussionStatisticsRequest
	(*GetDiscussionStatisticsResponse)(nil), // 47: services.GetDiscussionStatisticsResponse
	(*AddDiscussionRequest)(nil),            // 48: services.AddDiscussionRequest
	(*AddDiscussionResponse)(nil),           // 49: services.AddDiscussionResponse
	(*UpdateDiscussionLastReadRequest)(nil), // 50: services.UpdateDiscussionLastReadRequest
	(*UpdateDiscussionResponse)(nil),        // 51: services.UpdateDiscussionResponse
	(*RemoveDiscussionRequest)(nil),         // 52: services.RemoveDiscussionRequest
	(*RemoveDiscussionResponse)(nil),        // 53: services.RemoveDiscussionResponse
	(*CreateInvoiceRequest)(nil),            // 54: services.CreateInvoiceRequest
	(*CreateInvoiceResponse)(nil),           // 55: services.CreateInvoiceResponse
	(*LookupInvoiceRequest)(nil),            // 56: services.LookupInvoiceRequest
	(*LookupInvoiceResponse)(nil),           // 57: services.LookupInvoiceResponse
	(*PayRequest)(nil),                      // 58: services.PayRequest
	(*PaymentOptions)(nil),                  // 59: services.PaymentOptions
	(*PayResponse)(nil),                     // 60: services.PayResponse
	(*Payment)(nil),                         // 61: services.Payment
	(*PaymentHTLC)(nil),                     // 62: services.PaymentHTLC
	(*Invoice)(nil),                         // 63: services.Invoice
	(*RouteHint)(nil),                       // 64: services.RouteHint
	(*HopHint)(nil),                         // 65: services.HopHint
	(*InvoiceHTLC)(nil),                     // 66: services.InvoiceHTLC
	(*timestamppb.Timestamp)(nil),           // 67: google.protobuf.Timestamp
}
var file_rpc_services_rpc_proto_depIdxs = []int32{
	7,  // 0: services.SelfInfoResponse.info:type_name -> services.NodeInfo
	9,  // 1: services.SelfInfoResponse.chains:type_name -> services.Chain
	7,  // 2: services.NodeInfoResponse.nodes:type_name -> services.NodeInfo
	7,  // 3: services.ContactInfo.node:type_name -> services.NodeInfo
	21, // 4: services.GetContactsResponse.contacts:type_name -> services.ContactInfo
	21, // 5: services.AddContactRequest.contact:type_name -> services.ContactInfo
	21, // 6: services.AddContactResponse.contact:type_name -> services.ContactInfo
	61, // 7: services.Payments.payments:type_name -> services.Payment
	67, // 8: services.Message.sent_timestamp:type_name -> google.protobuf.Timestamp
	67, // 9: services.Message.received_timestamp:type_name -> google.protobuf.Timestamp
	31, // 10: services.Message.payment_routes:type_name -> services.PaymentRoute
	29, // 11: services.Message.payments:type_name -> services.Payments
	63, // 12: services.Message.invoice:type_name -> services.Invoice
	32, // 13: services.PaymentRoute.hops:type_name -> services.PaymentHop
	33, // 14: services.EstimateMessageRequest.options:type_name -> services.MessageOptions
	30, // 15: services.EstimateMessageResponse.message:type_name -> services.Message
	33, // 16: services.SendMessageRequest.options:type_name -> services.MessageOptions
	30, // 17: services.SendMessageResponse.sent_message:type_name -> services.Message
	30, // 18: services.SubscribeMessageResponse.received_message:type_name -> services.Message
	41, // 19: services.DiscussionInfo.options:type_name -> services.DiscussionOptions
	40, // 20: services.GetDiscussionsResponse.discussion:type_name -> services.DiscussionInfo
	4,  // 21: services.GetDiscussionHistoryByIDRequest.page_options:type_name -> services.KeySetPageOptions
	30, // 22: services.GetDiscussionHistoryResponse.message:type_name -> services.Message
	40, // 23: services.AddDiscussionRequest.discussion:type_name -> services.DiscussionInfo
	40, // 24: services.AddDiscussionResponse.discussion:type_name -> services.DiscussionInfo
	63, // 25: services.CreateInvoiceResponse.invoice:type_name -> services.Invoice
	63, // 26: services.LookupInvoiceResponse.invoice:type_name -> services.Invoice
	59, // 27: services.PayRequest.options:type_name -> services.PaymentOptions
	61, // 28: services.PayResponse.payment:type_name -> services.Payment
	67, // 29: services.Payment.created_timestamp:type_name -> google.protobuf.Timestamp
	67, // 30: services.Payment.resolved_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 31: services.Payment.state:type_name -> services.PaymentState
	62, // 32: services.Payment.HTLCs:type_name -> services.PaymentHTLC
	31, // 33: services.PaymentHTLC.route:type_name -> services.PaymentRoute
	67, // 34: services.PaymentHTLC.attempt_timestamp:type_name -> google.protobuf.Timestamp
	67, // 35: services.PaymentHTLC.resolve_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 36: services.PaymentHTLC.state:type_name -> services.HTLCState
	67, // 37: services.Invoice.created_timestamp:type_name -> google.protobuf.Timestamp
	67, // 38: services.Invoice.settled_timestamp:type_name -> google.protobuf.Timestamp
	64, // 39: services.Invoice.route_hints:type_name -> services.RouteHint
	2,  // 40: services.Invoice.state:type_name -> services.InvoiceState
	66, // 41: services.Invoice.invoice_htlcs:type_name -> services.InvoiceHTLC
	65, // 42: services.RouteHint.hop_hints:type_name -> services.HopHint
	3,  // 43: services.InvoiceHTLC.state:type_name -> services.InvoiceHTLCState
	67, // 44: services.InvoiceHTLC.accept_timestamp:type_name -> google.protobuf.Timestamp
	67, // 45: services.InvoiceHTLC.resolve_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 46: services.NodeInfoService.GetVersion:input_type -> services.VersionRequest
	8,  // 47: services.NodeInfoService.GetSelfInfo:input_type -> services.SelfInfoRequest
	11, // 48: services.NodeInfoService.GetSelfBalance:input_type -> services.SelfBalanceRequest
	13, // 49: services.NodeInfoService.GetNodes:input_type -> services.GetNodesRequest
	14, // 50: services.NodeInfoService.SearchNodeByAddress:input_type -> services.SearchNodeByAddressRequest
	15, // 51: services.NodeInfoService.SearchNodeByAlias:input_type -> services.SearchNodeByAliasRequest
	17, // 52: services.NodeInfoService.ConnectNode:input_type -> services.ConnectNodeRequest
	19, // 53: services.ChannelService.OpenChannel:input_type -> services.OpenChannelRequest
	22, // 54: services.ContactService.GetContacts:input_type -> services.GetContactsRequest
	24, // 55: services.ContactService.AddContact:input_type -> services.AddContactRequest
	26, // 56: services.ContactService.RemoveContactByID:input_type -> services.RemoveContactByIDRequest
	27, // 57: services.ContactService.RemoveContactByAddress:input_type -> services.RemoveContactByAddressRequest
	34, // 58: services.MessageService.EstimateMessage:input_type -> services.EstimateMessageRequest
	36, // 59: services.MessageService.SendMessage:input_type -> services.SendMessageRequest
	38, // 60: services.MessageService.SubscribeMessages:input_type -> services.SubscribeMessageRequest
	42, // 61: services.DiscussionService.GetDiscussions:input_type -> services.GetDiscussionsRequest
	44, // 62: services.DiscussionService.GetDiscussionHistoryByID:input_type -> services.GetDiscussionHistoryByIDRequest
	46, // 63: services.DiscussionService.GetDiscussionStatistics:input_type -> services.GetDiscussionStatisticsRequest
	48, // 64: services.DiscussionService.AddDiscussion:input_type -> services.AddDiscussionRequest
	50, // 65: services.DiscussionService.UpdateDiscussionLastRead:input_type -> services.UpdateDiscussionLastReadRequest
	52, // 66: services.DiscussionService.RemoveDiscussion:input_type -> services.RemoveDiscussionRequest
	54, // 67: services.PaymentService.CreateInvoice:input_type -> services.CreateInvoiceRequest
	56, // 68: services.PaymentService.LookupInvoice:input_type -> services.LookupInvoiceRequest
	58, // 69: services.PaymentService.Pay:input_type -> services.PayRequest
	6,  // 70: services.NodeInfoService.GetVersion:output_type -> services.Version
	10, // 71: services.NodeInfoService.GetSelfInfo:output_type -> services.SelfInfoResponse
	12, // 72: services.NodeInfoService.GetSelfBalance:output_type -> services.SelfBalanceResponse
	16, // 73: services.NodeInfoService.GetNodes:output_type -> services.NodeInfoResponse
	16, // 74: services.NodeInfoService.SearchNodeByAddress:output_type -> services.NodeInfoResponse
	16, // 75: services.NodeInfoService.SearchNodeByAlias:output_type -> services.NodeInfoResponse
	18, // 76: services.NodeInfoService.ConnectNode:output_type -> services.ConnectNodeResponse
	20, // 77: services.ChannelService.OpenChannel:output_type -> services.OpenChannelResponse
	23, // 78: services.ContactService.GetContacts:output_type -> services.GetContactsResponse
	25, // 79: services.ContactService.AddContact:output_type -> services.AddContactResponse
	28, // 80: services.ContactService.RemoveContactByID:output_type -> services.RemoveContactResponse
	28, // 81: services.ContactService.RemoveContactByAddress:output_type -> services.RemoveContactResponse
	35, // 82: services.MessageService.EstimateMessage:output_type -> services.EstimateMessageResponse
	37, // 83: services.MessageService.SendMessage:output_type -> services.SendMessageResponse
	39, // 84: services.MessageService.SubscribeMessages:output_type -> services.SubscribeMessageResponse
	43, // 85: services.DiscussionService.GetDiscussions:output_type -> services.GetDiscussionsResponse
	45, // 86: services.DiscussionService.GetDiscussionHistoryByID:output_type -> services.GetDiscussionHistoryResponse
	47, // 87: services.DiscussionService.GetDiscussionStatistics:output_type -> services.GetDiscussionStatisticsResponse
	49, // 88: services.DiscussionService.AddDiscussion:output_type -> services.AddDiscussionResponse
	51, // 89: services.DiscussionService.UpdateDiscussionLastRead:output_type -> services.UpdateDiscussionResponse
	53, // 90: services.DiscussionService.RemoveDiscussion:output_type -> services.RemoveDiscussionResponse
	55, // 91: services.PaymentService.CreateInvoice:output_type -> services.CreateInvoiceResponse
	57, // 92: services.PaymentService.LookupInvoice:output_type -> services.LookupInvoiceResponse
	60, // 93: services.PaymentService.Pay:output_type -> services.PayResponse
	70, // [70:94] is the sub-list for method output_type
	46, // [46:70] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_rpc_services_rpc_proto_init() }
func file_rpc_services_rpc_proto_init() {
	if File_rpc_services_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_services_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySetPageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNodeByAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveContactByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveContactByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionHistoryByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscussionStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiscussionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiscussionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscussionLastReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscussionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDiscussionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDiscussionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupInvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentHTLC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_services_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceHTLC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_services_rpc_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Message_Payments)(nil),
		(*Message_Invoice)(nil),
	}
	file_rpc_services_rpc_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*PayRequest_PayReq)(nil),
		(*PayRequest_Address)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_services_rpc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_rpc_services_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_services_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_services_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_services_rpc_proto_msgTypes,
	}.Build()
	File_rpc_services_rpc_proto = out.File
	file_rpc_services_rpc_proto_rawDesc = nil
	file_rpc_services_rpc_proto_goTypes = nil
	file_rpc_services_rpc_proto_depIdxs = nil
}
