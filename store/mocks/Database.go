// Code generated by mockery v2.10.4. DO NOT EDIT.

package storemock

import (
	mock "github.com/stretchr/testify/mock"

	model "github.com/c13n-io/c13n-go/model"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AddContact provides a mock function with given fields: c
func (_m *Database) AddContact(c *model.Contact) (*model.Contact, error) {
	ret := _m.Called(c)

	var r0 *model.Contact
	if rf, ok := ret.Get(0).(func(*model.Contact) *model.Contact); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Contact) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDiscussion provides a mock function with given fields: disc
func (_m *Database) AddDiscussion(disc *model.Discussion) (*model.Discussion, error) {
	ret := _m.Called(disc)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(*model.Discussion) *model.Discussion); ok {
		r0 = rf(disc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Discussion) error); ok {
		r1 = rf(disc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddInvoice provides a mock function with given fields: inv
func (_m *Database) AddInvoice(inv *model.Invoice) error {
	ret := _m.Called(inv)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Invoice) error); ok {
		r0 = rf(inv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPayments provides a mock function with given fields: payments
func (_m *Database) AddPayments(payments ...*model.Payment) error {
	_va := make([]interface{}, len(payments))
	for _i := range payments {
		_va[_i] = payments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*model.Payment) error); ok {
		r0 = rf(payments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRawMessage provides a mock function with given fields: _a0
func (_m *Database) AddRawMessage(_a0 *model.RawMessage) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RawMessage) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContact provides a mock function with given fields: address
func (_m *Database) GetContact(address string) (*model.Contact, error) {
	ret := _m.Called(address)

	var r0 *model.Contact
	if rf, ok := ret.Get(0).(func(string) *model.Contact); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactByID provides a mock function with given fields: uid
func (_m *Database) GetContactByID(uid uint64) (*model.Contact, error) {
	ret := _m.Called(uid)

	var r0 *model.Contact
	if rf, ok := ret.Get(0).(func(uint64) *model.Contact); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContacts provides a mock function with given fields:
func (_m *Database) GetContacts() ([]model.Contact, error) {
	ret := _m.Called()

	var r0 []model.Contact
	if rf, ok := ret.Get(0).(func() []model.Contact); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussion provides a mock function with given fields: uid
func (_m *Database) GetDiscussion(uid uint64) (*model.Discussion, error) {
	ret := _m.Called(uid)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(uint64) *model.Discussion); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByParticipants provides a mock function with given fields: participants
func (_m *Database) GetDiscussionByParticipants(participants []string) (*model.Discussion, error) {
	ret := _m.Called(participants)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func([]string) *model.Discussion); ok {
		r0 = rf(participants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(participants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussions provides a mock function with given fields: seekIndex, pageSize
func (_m *Database) GetDiscussions(seekIndex uint64, pageSize uint64) ([]model.Discussion, error) {
	ret := _m.Called(seekIndex, pageSize)

	var r0 []model.Discussion
	if rf, ok := ret.Get(0).(func(uint64, uint64) []model.Discussion); ok {
		r0 = rf(seekIndex, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(seekIndex, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: pageOpts
func (_m *Database) GetInvoices(pageOpts model.PageOptions) ([]*model.Invoice, error) {
	ret := _m.Called(pageOpts)

	var r0 []*model.Invoice
	if rf, ok := ret.Get(0).(func(model.PageOptions) []*model.Invoice); ok {
		r0 = rf(pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PageOptions) error); ok {
		r1 = rf(pageOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastInvoiceIndex provides a mock function with given fields:
func (_m *Database) GetLastInvoiceIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPaymentIndex provides a mock function with given fields:
func (_m *Database) GetLastPaymentIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: discussionUID, pageOpts
func (_m *Database) GetMessages(discussionUID uint64, pageOpts model.PageOptions) ([]model.MessageAggregate, error) {
	ret := _m.Called(discussionUID, pageOpts)

	var r0 []model.MessageAggregate
	if rf, ok := ret.Get(0).(func(uint64, model.PageOptions) []model.MessageAggregate); ok {
		r0 = rf(discussionUID, pageOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MessageAggregate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, model.PageOptions) error); ok {
		r1 = rf(discussionUID, pageOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveContact provides a mock function with given fields: address
func (_m *Database) RemoveContact(address string) (*model.Contact, error) {
	ret := _m.Called(address)

	var r0 *model.Contact
	if rf, ok := ret.Get(0).(func(string) *model.Contact); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveContactByID provides a mock function with given fields: uid
func (_m *Database) RemoveContactByID(uid uint64) (*model.Contact, error) {
	ret := _m.Called(uid)

	var r0 *model.Contact
	if rf, ok := ret.Get(0).(func(uint64) *model.Contact); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDiscussion provides a mock function with given fields: uid
func (_m *Database) RemoveDiscussion(uid uint64) (*model.Discussion, error) {
	ret := _m.Called(uid)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(uint64) *model.Discussion); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscussionLastRead provides a mock function with given fields: uid, readMsgID
func (_m *Database) UpdateDiscussionLastRead(uid uint64, readMsgID uint64) error {
	ret := _m.Called(uid, readMsgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(uid, readMsgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
